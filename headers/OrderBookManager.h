#pragma once#include "exchange_common.h"#include "CentralMessageSystem.h"#include "Message.h"#include "LOB.h"/** * @class OrderBookManager * @brief manages all the order books in the exchange */class OrderBookManager{public:    OrderBookManager(CentralMessageSystem& CMS, DBConnection& db);private:    CentralMessageSystem& cms;    std::mutex order_book_mutex;    std::unordered_map<std::string, LOB*> order_book;    DBConnection& db;    void start_up_order_book();    void process_message(const BaseMessage& message);    std::unique_ptr<OrderConfirmationMessage> add_order(const AddOrderMessage* message);    std::unique_ptr<OrderConfirmationMessage> cancel_order(const std::string& instrument_id, const std::string& client_id, int order_id);    std::vector<std::unique_ptr<TradeExecutionMessage>> check_for_match(const std::string& instrument_id, const std::string& type);    void write_order_to_db(const Order* order);    void write_execution_to_db(const Execution* execution);    void cancel_order_in_db (const std::string &instrument_id, int order_id, long long cancel_time);};